{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;ACAO;AACP;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA,8CAA8C,KAAK,qBAAqB,OAAO;AAC/E;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,+CAA+C,MAAM;AACrD;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,WAAW;AAC1D;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa;AAChD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa,QAAQ,GAAG;AAC3D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa,QAAQ,GAAG;AAC3D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACzI4B;AACI;AACF;AACO;AACqB;AAC1D;AACA;AACA,QAAQ,uCAAI;AACZ,YAAY,0DAAe,cAAc,yCAAK;AAC9C;AACA;AACA;AACA,cAAc,2CAAS;AACvB;AACA,KAAK;AACL,KAAK;AACL;AACA;AACA,QAAQ,uCAAI;AACZ,YAAY,6DAAkB,cAAc,yCAAK;AACjD;AACA;AACA;AACA,cAAc,8CAAY;AAC1B;AACA,KAAK;AACL,CAAC;AACD;AACA;AACO;AACP,iBAAiB,6BAA6B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAU;AACtB,YAAY,oDAAgB;AAC5B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACrHA;AACO;AACP;AACA;AACA,cAAc,8BAA8B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA,oBAAoB,6CAA6C;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,+CAA+C,cAAc;AAC7D;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC5EO;AACP;AACA,cAAc,mDAAmD;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpE6B;AAC7B;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA,0DAA0D;AAC1D,0DAA0D;AAC1D,iEAAiE;AACjE;AACA,4DAA4D;AAC5D,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gDAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8CAAY,WAAW,wBAAwB;AAC7D;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8CAAY,YAAY,4BAA4B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8CAAY,YAAY,4BAA4B;AAClE,cAAc,8CAAY,WAAW,wBAAwB;AAC7D,cAAc,8CAAY,WAAW,8BAA8B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM,EAAE,KAAK;AAC/B;AACA;AACA;AACA,uCAAuC,MAAM;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,4BAA4B,GAAG,8BAA8B,GAAG,8BAA8B;AAChH;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACvOgC;AACF;AACA;AACkB;AACtB;AAC1B;AACA;AACA,QAAQ,uCAAI;AACZ,iBAAiB,8DAAmB,cAAc,yCAAK;AACvD;AACA;AACA;AACA;AACA,sCAAsC,gDAAc;AACpD;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uCAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACqD;;;;;;;;;;;;;;;;;;;;;AC7DrD;AAC0C;AACD;AACA;AACQ;AACX;AACV;AAC5B;AACA;AACA;AACA;AACA;AACA,uBAAuB,wDAAW;AAClC;AACA;AACA;AACA,iBAAiB,kDAAI;AACrB;AACA;AACA,CAAC;AACD;AACO,sBAAsB,4DAAS;AACtC;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2DAAc;AACrC;AACA;AACA;AACA,MAAM;AACN,yBAAyB,0DAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCzDA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;UENA;UACA;UACA;UACA","sources":["webpack://final_project/./src/styles/style.css?2394","webpack://final_project/./src/components/API.js","webpack://final_project/./src/components/AUTH.js","webpack://final_project/./src/components/Form.js","webpack://final_project/./src/components/Input.js","webpack://final_project/./src/components/Task.js","webpack://final_project/./src/components/TaskBoard.js","webpack://final_project/./src/components/configInputs.js","webpack://final_project/./src/index.js","webpack://final_project/webpack/bootstrap","webpack://final_project/webpack/runtime/define property getters","webpack://final_project/webpack/runtime/hasOwnProperty shorthand","webpack://final_project/webpack/runtime/make namespace object","webpack://final_project/webpack/before-startup","webpack://final_project/webpack/startup","webpack://final_project/webpack/after-startup"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","export const TOKEN_KEY = 'token';\r\n\r\nclass ApiError extends Error {\r\n    constructor({message, data, status}) {\r\n        super(message);\r\n        this.status = status;\r\n        this.data = data; \r\n    }\r\n}\r\n\r\nclass API {\r\n    constructor() {\r\n        this.baseURL = 'https://byte-tasks.herokuapp.com/api';\r\n        this.headers = {\r\n            Authorization: null,\r\n            'Content-Type': 'application/json',\r\n        };\r\n    }\r\n\r\n    async handleErrors(response) {\r\n        const {ok, status, statusText} = response;\r\n        if(!ok){\r\n            /* throw new Error(`Response on ${url} failed with status ${status}`) */\r\n            throw new ApiError({\r\n                message: \"Error!\",\r\n                data: await response.json(),\r\n                status: status,\r\n            })\r\n        }\r\n    }\r\n\r\n    async register(data) {\r\n        const response = await fetch(`${this.baseURL}/auth/register`, {\r\n            method: 'POST',\r\n            headers: this.headers,\r\n            body: JSON.stringify(data),\r\n        });\r\n\r\n        await this.handleErrors(response);\r\n\r\n        const registeredUser = await response.json();\r\n    \r\n        return registeredUser;\r\n    }\r\n\r\n    async login(data) {\r\n        const response = await fetch(`${this.baseURL}/auth/login/`, {\r\n            method: 'POST',\r\n            headers: this.headers,\r\n            body: JSON.stringify(data),\r\n        })\r\n\r\n        await this.handleErrors(response);\r\n\r\n        const {token} = await response.json();\r\n    \r\n        this.headers.Authorization = `Bearer ${token}`;\r\n        localStorage.setItem(TOKEN_KEY, token);\r\n    \r\n    }\r\n    \r\n    async getSelf() {\r\n        const response = await fetch(`${this.baseURL}/auth/user/self`, {\r\n            method: 'GET',\r\n            headers: this.headers,\r\n        })\r\n        await this.handleErrors(response)\r\n\r\n        const user = await response.json()\r\n        return user;\r\n    }\r\n\r\n    isLoggedIn() {\r\n        return Boolean(localStorage.getItem(TOKEN_KEY))\r\n    }\r\n\r\n    autoLogin() {\r\n        const localToken = localStorage.getItem(TOKEN_KEY);\r\n        this.headers.Authorization = `Bearer ${localToken}`;\r\n\r\n        return this.getSelf()\r\n    }\r\n\r\n    async createTask(data) {\r\n        const res = await fetch(`${this.baseURL}/task`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(data),\r\n            headers: this.headers,\r\n        });\r\n        await this.handleErrors(res);\r\n\r\n        return res.json();\r\n    }\r\n\r\n    async getAllTasks() {\r\n        const response = await fetch(`${this.baseURL}/task`, {\r\n          method: \"GET\",\r\n          headers: this.headers,\r\n        });\r\n    \r\n       await this.handleErrors(response);\r\n        \r\n        return await response.json();\r\n      }\r\n\r\n    async editTask(id, data) {\r\n        const res = await fetch(`${this.baseURL}/task/${id}`, {\r\n            method: 'PATCH',\r\n            body: JSON.stringify(data),\r\n            headers: this.headers,\r\n        });\r\n        await this.handleErrors(res);\r\n\r\n        return res.json();\r\n    }\r\n\r\n    async deleteTask(id, data) {\r\n        const res = await fetch(`${this.baseURL}/task/${id}`, {\r\n            method: 'DELETE',\r\n            headers: this.headers,\r\n        });\r\n        await this.handleErrors(res);\r\n\r\n        return res;\r\n    }\r\n\r\n    logout() {\r\n        localStorage.removeItem(TOKEN_KEY);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const api = new API();\r\n\r\n\r\n\r\n","import { api } from \"./API\";\r\nimport { Input } from './Input';\r\nimport { Form } from './Form';\r\nimport { taskBoard } from \"../index\";\r\nimport {loginConfig, registerConfig} from './configInputs'\r\n\r\nconst getLoginForm = (onSuccess) => \r\n    new Form({\r\n    inputs: loginConfig.map(input => new Input(input)),\r\n    submitBtnText: 'Submit',\r\n    title: 'LOGIN',\r\n    onSubmit: async (data) => {\r\n        await api.login(data);\r\n        onSuccess()\r\n    },\r\n    })\r\n\r\nconst getRegisterForm =(onSuccess) => \r\n    new Form({\r\n    inputs: registerConfig.map(input => new Input(input)),\r\n    submitBtnText: 'Submit',\r\n    title: 'REGISTER',\r\n    onSubmit: async (data) => {\r\n        await api.register(data);\r\n        onSuccess()\r\n    },\r\n});\r\n\r\n\r\nexport class Auth {\r\n    constructor({appContainer, onLoginSuccess}) {\r\n        this.appContainer = appContainer;\r\n\r\n        this.formContainer = document.createElement('div');\r\n        this.switchBtn = document.createElement('button');\r\n        this.logoutBtn = document.createElement('button');\r\n        this.avatar = document.createElement('span');\r\n\r\n        this.form = null;\r\n        this.user = null;\r\n        this.isLogin = true // login | register\r\n\r\n        this.loginForm = getLoginForm(onLoginSuccess);\r\n        this.registerForm = getRegisterForm(this.switchForms.bind(this));\r\n\r\n        this.createFormContainer();\r\n        this.createHeaderControls();\r\n    }\r\n\r\n    createFormContainer() {\r\n        this.formContainer.classList.add('auth-form');\r\n        this.switchBtn.classList.add('text-registration');\r\n        this.switchBtn.innerText = 'REGISTER';\r\n        this.formContainer.prepend(this.switchBtn);\r\n\r\n        this.switchBtn.addEventListener('click', () => {\r\n            this.switchForms()\r\n        })\r\n    }\r\n\r\n    createHeaderControls(){\r\n        this.logoutBtn.classList.add('button', 'button_text');\r\n        this.logoutBtn.innerText = 'Logout';\r\n        this.avatar.classList.add('avatar');\r\n\r\n        this.logoutBtn.addEventListener('click', () => {\r\n            this.logout();\r\n            api.logout();\r\n            taskBoard.logout()\r\n        });\r\n\r\n    }\r\n\r\n    renderHeaderControls(){\r\n        const controlContainer = document.getElementById('header-controls');\r\n        this.avatar.innerText = this.user.name[0];\r\n\r\n        controlContainer.append(this.logoutBtn, this.avatar)        \r\n    }\r\n\r\n    renderAuthForm(){\r\n        if(this.form) {\r\n            this.form.form.remove()\r\n        }\r\n\r\n        if(this.isLogin){\r\n            this.form = this.loginForm;\r\n        }else {\r\n            this.form = this.registerForm;\r\n        }\r\n       \r\n        this.form.render(this.formContainer)\r\n        this.appContainer.append(this.formContainer) \r\n\r\n        }\r\n\r\n    switchForms(){\r\n        this.isLogin = !this.isLogin;\r\n\r\n        if(this.isLogin){\r\n            this.switchBtn.innerText = 'REGISTER';\r\n        }else {\r\n            this.switchBtn.innerText = 'LOGIN'\r\n        }\r\n        \r\n        this.renderAuthForm()\r\n    }\r\n\r\n    logout(){\r\n        this.avatar.remove();\r\n        this.logoutBtn.remove();\r\n        this.appContainer.innerHTML = '';\r\n        this.isLogin = true;\r\n\r\n        this.renderAuthForm();\r\n\r\n    }\r\n}\r\n","\r\nexport class Form {\r\n    constructor (options){\r\n        \r\n        const{inputs, changeBtnText, title} = options;\r\n\r\n        this.inputs = inputs;\r\n        this.title = title;\r\n        this.changeBtnText = changeBtnText;\r\n        \r\n        this.form = document.createElement('form');\r\n        this.createForm(options)\r\n        \r\n    }\r\n\r\n    static getFormValue (inputs) {\r\n        return inputs.reduce((values, input) =>{\r\n            values[input.name] = input.value;\r\n\r\n            return values;\r\n        }, {}); \r\n    }\r\n\r\n        createForm({onSubmit, registerText, submitBtnText, title}){\r\n            this.submitBtn = document.createElement('button');\r\n            registerText = document.createElement('h3');\r\n            this.submitBtnText = submitBtnText;\r\n\r\n            this.form.classList.add('form');\r\n            this.submitBtn.type = 'submit';\r\n            this.submitBtn.classList.add('button', 'button_submit');\r\n            registerText.classList.add('button', 'button_text');\r\n    \r\n            registerText.innerText = title;\r\n            this.submitBtn.innerText = submitBtnText;\r\n            this.form.append(registerText);\r\n\r\n            this.form.addEventListener('submit', async (e) =>{\r\n                e.preventDefault();\r\n\r\n                const formValues = Form.getFormValue(this.inputs);\r\n                \r\n                this.submitBtn.setAttribute('disabled', '');\r\n                try {\r\n                    await onSubmit(formValues, e)\r\n                } catch (err) {\r\n                    err.data.details.forEach(({path, message}) =>{\r\n                        const erroredInput = this.inputs.find((input) => {\r\n                            return input.name === path[0];\r\n                        });\r\n                        erroredInput.updateErrorMessage(message)\r\n                    })\r\n                }\r\n                this.submitBtn.removeAttribute('disabled');\r\n                    \r\n            })\r\n\r\n            this.inputs.forEach((input) =>{\r\n                this.form.append(input.control)\r\n            })\r\n            \r\n            this.form.append(this.submitBtn);\r\n            \r\n        }\r\n        render(container) {\r\n            container.append(this.form);\r\n\r\n            return container\r\n        }\r\n        \r\n    }\r\n\r\n   \r\n   \r\n\r\n\r\n\r\n","export class Input {\r\n    constructor (options){\r\n        const{name, label, placeholder, type, onInput, onChange} = options;\r\n\r\n        this.element = document.createElement('input');\r\n        this.errorMessage = document.createElement('span');\r\n\r\n        this.value = this.element.value;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.element.name = name;\r\n        this.element.type = type;\r\n        this.element.placeholder = placeholder;\r\n        this.element.label = label;\r\n\r\n        this.value = this.element.value;\r\n\r\n        this.control = this.createControl(onInput, onChange);\r\n\r\n        }\r\n\r\n        createControl(onInput, onChange){\r\n            const div = document.createElement('div');\r\n            const labelInput = document.createElement('label');\r\n            const inputId = `_${this.name}`;\r\n\r\n            div.classList.add('input-container');\r\n            this.errorMessage.classList.add('input-error');\r\n            this.element.classList.add('input_name');\r\n\r\n            this.element.id = inputId;\r\n\r\n            labelInput.setAttribute('for', this.element.id);\r\n            labelInput.innerText = this.label;\r\n\r\n            div.append(labelInput, this.element, this.errorMessage);\r\n            \r\n            this.element.addEventListener('input', (e) =>{\r\n                this.value = e.target.value;\r\n                this.updateErrorMessage('');\r\n                if(onInput){\r\n                onInput(e);\r\n                };\r\n            })\r\n\r\n            if(onChange){\r\n                this.element.addEventListener('change', (e) =>{\r\n                    onChange(e);\r\n                });\r\n            }\r\n            \r\n            return div\r\n        }\r\n\r\n        updateErrorMessage(message) {\r\n            this.errorMessage.innerText = message;\r\n        }\r\n        \r\n\r\n    render(div){\r\n        this.control.append(this.div) \r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import { api }  from './API';\r\n\r\nexport class Task {\r\n    constructor({\r\n       name,\r\n       description,\r\n        timeTracked,\r\n        isActive,\r\n        isFinished,\r\n        _id,\r\n        createdAt,\r\n    }){\r\n        this.name = name;\r\n        this.description = description;\r\n        this.timeTracked = timeTracked;\r\n        this.isActive = isActive;\r\n        this.isFinished = isFinished;\r\n        this.createdAt = new Date(createdAt);\r\n\r\n        this.id = _id;\r\n\r\n        this.taskCard = document.createElement('div');//глобальная карточка, которая содержит все остальное.\r\n        this.taskContent = document.createElement('div');\r\n        this.deleteBtn = document.createElement('button');// кнопка, которая удаляет карточку(крестик);\r\n        this.timerBtn = document.createElement('button'); //кнопка, которая работает с таймером;\r\n        this.timeTrackedElement = document.createElement('span');// элемент, содержащи колличество затреканого времени;\r\n        this.markAsDoneBtn = document.createElement('button');\r\n        this.restartBtn = document.createElement('button'); //кнопка, которая отмечает задачу как сделаную или начать віполнять\r\n        this.timeTrackedIntervalId = null; // на фротнэнде отвечает за запуск секундомера\r\n    }\r\n\r\n    renderTaskCard(container) {\r\n        const titleElem = document.createElement('h3');\r\n        const descriptionElem = document.createElement('p');\r\n        const timeTracker = document.createElement('div');//кнопка + трєкер\r\n        const dateElement = document.createElement('p');\r\n\r\n        titleElem.classList.add('task-title');\r\n        descriptionElem.classList.add('task-description');\r\n        timeTracker.classList.add('time-tracker');\r\n        dateElement.classList.add('task-date');\r\n\r\n        this.taskCard.classList.add('task-card');\r\n        this.deleteBtn.classList.add('task-delete-btn');\r\n        this.timerBtn.classList.add('timer-btn');\r\n        this.markAsDoneBtn.classList.add('button', 'button_task', 'btn-small');\r\n        this.restartBtn.classList.add('button', 'button_task', 'btn-small', 'disabled-btn');\r\n\r\n        if(this.isFinished){\r\n\r\n            this.timerBtn.setAttribute('disabled', '');\r\n            this.taskCard.classList.add('task-finished');\r\n            this.restartBtn.innerText = 'Restart';\r\n            \r\n        }else{\r\n            this.timerBtn.classList.add(\r\n                this.isActive ? 'timer-btn-stop' : 'timer-btn-play'\r\n            );\r\n            this.markAsDoneBtn.innerText = 'Mark as done';\r\n            \r\n        }\r\n\r\n        titleElem.innerText = this.name;\r\n        descriptionElem.innerText = this.description;\r\n\r\n        dateElement.innerText = Task.getFormattedDate(this.createdAt);\r\n        this.timeTrackedElement.innerText = Task.getFormattedTimeTracked(this.timeTracked);\r\n        this.deleteBtn.innerHTML = '<i class=\"fas fa-times\"></i>';\r\n\r\n        if(this.isActive){\r\n            this.startTracker();\r\n            this.timerBtn.innerHTML = `<i class=\"fas fa-pause\"></i>`;\r\n        }else{\r\n            this.timerBtn.innerHTML = `<i class=\"fas fa-play\"></i>`; \r\n        }\r\n\r\n        timeTracker.append(this.timerBtn, this.timeTrackedElement);\r\n\r\n        this.taskContent.append(\r\n            titleElem,\r\n            descriptionElem,\r\n            timeTracker,\r\n            dateElement,\r\n            this.deleteBtn,\r\n        )\r\n\r\n        this.taskCard.append(\r\n            this.taskContent,\r\n            this.markAsDoneBtn,\r\n            this.restartBtn,\r\n            \r\n        );\r\n\r\n        container.append(this.taskCard);\r\n\r\n        this.timerBtn.addEventListener('click', this.toggleTimeTracker);\r\n        this.deleteBtn.addEventListener('click', this.removeTaskCard);\r\n        this.restartBtn.addEventListener('click', this.restartTracker);\r\n        this.markAsDoneBtn.addEventListener('click', this.toggleTaskFinished);\r\n      \r\n        console.log(this.isActive) \r\n        console.log('Task5', this.isFinished)\r\n        \r\n    }\r\n  \r\n    removeTaskCard =  async () => {\r\n        await api.deleteTask(this.id);\r\n        this.taskCard.remove()\r\n    };\r\n\r\n    toggleTimeTracker = async () => {\r\n        this.isActive = !this.isActive;\r\n\r\n        await api.editTask(this.id, {isActive: this.isActive});\r\n\r\n        if(this.isActive) {\r\n            this.startTracker();\r\n        } else {\r\n            this.stopTracker();\r\n        }\r\n\r\n    };\r\n\r\n    toggleTaskFinished = async () => {\r\n        this.isFinished = !this.isFinished;\r\n\r\n        await api.editTask(this.id, { isFinished: this.isFinished});\r\n\r\n        this.taskContent.classList.toggle('task-finished');\r\n\r\n        if(this.isFinished){\r\n            this.timerBtn.setAttribute('disabled', '');\r\n            this.markAsDoneBtn.classList.remove('active-btn') \r\n            this.markAsDoneBtn.classList.add('disabled-btn') \r\n            this.restartBtn.classList.remove('disabled-btn')  \r\n            this.restartBtn.classList.add('active-btn')  \r\n            this.restartBtn.innerText = 'Restart'        \r\n            this.stopTracker();\r\n\r\n        } else {\r\n            clearInterval(this.timeTrackedIntervalId);\r\n            this.timerBtn.removeAttribute('disabled');\r\n            this.markAsDoneBtn.classList.remove('disabled-btn') \r\n            this.markAsDoneBtn.classList.add('active-btn') \r\n            this.markAsDoneBtn.innerText = 'Mark as done';\r\n            this.restartBtn.classList.remove('active-btn')  \r\n            this.restartBtn.classList.add('disabled-btn') \r\n            \r\n            this.startTracker()\r\n        }\r\n    };\r\n\r\n    \r\n\r\n    startTracker(){\r\n\r\n        this.timerBtn.classList.remove('timer-btn-play');\r\n        this.timerBtn.classList.add('timer-btn-stop');\r\n        this.timerBtn.innerHTML = `<i class=\"fas fa-pause\"></i>`;\r\n\r\n        if(this.timeTrackedIntervalId == null){\r\n            this.timeTrackedIntervalId = setInterval(() => {\r\n                this.timeTracked += 1000;\r\n                this.updateTimeTracker();\r\n            }, 1000);\r\n        } \r\n    }\r\n\r\n    stopTracker(){\r\n        this.timerBtn.classList.remove('timer-btn-stop');\r\n        this.timerBtn.classList.add('timer-btn-play');\r\n        this.timerBtn.innerHTML = `<i class=\"fas fa-play\"></i>`;\r\n        \r\n        clearInterval(this.timeTrackedIntervalId);\r\n        this.timeTrackedIntervalId = null;\r\n    }\r\n\r\n    restartTracker = async () =>{\r\n        \r\n        this.timeTracked = 0;\r\n        this.updateTimeTracker()\r\n        this.isActive = false;\r\n        this.isFinished = false;\r\n\r\n        await api.editTask(this.id, { isFinished: this.isFinished});\r\n        await api.editTask(this.id, {isActive: this.isActive});\r\n        await api.editTask(this.id, {timeTracked: this.timeTracked});\r\n\r\n        this.markAsDoneBtn.classList.remove('disabled-btn') \r\n        this.markAsDoneBtn.classList.add('active-btn') \r\n        this.restartBtn.classList.remove('active-btn')  \r\n        this.restartBtn.classList.add('disabled-btn') \r\n        this.timerBtn.removeAttribute('disabled');\r\n        this.taskContent.classList.toggle('task-finished');\r\n\r\n        this.timerBtn.classList.add('timer-btn-play');\r\n        this.timerBtn.innerHTML = `<i class=\"fas fa-play\"></i>`;\r\n         /* this.isActive = !this.isActive; */\r\n        console.log(this.isActive) \r\n        console.log('Task5', this.isFinished)\r\n    }\r\n\r\n    updateTimeTracker(){\r\n        const formatted = Task.getFormattedTimeTracked(this.timeTracked);\r\n        this.timeTrackedElement.innerText = formatted;\r\n\r\n    }\r\n\r\n    \r\n\r\n    static getFormattedDate(d) {\r\n        const date = d.toLocaleDateString();\r\n        const time = d.toLocaleTimeString();\r\n\r\n        return `${date} ${time}`;\r\n    }\r\n\r\n    static addOptionalZero(value) {\r\n        return value > 9 ? value : `0${value}`;\r\n    }\r\n\r\n    static getFormattedTimeTracked(timeTracked) {\r\n        const timeTrackedSeconds = Math.floor(timeTracked / 1000);\r\n        const hours =  Math.floor(timeTrackedSeconds / 3600);\r\n        const minutes =  Math.floor((timeTrackedSeconds  - hours * 3600 )/ 60);\r\n        const seconds = timeTrackedSeconds - hours * 3600 - minutes * 60;\r\n\r\n        return `${this.addOptionalZero(hours)}:${this.addOptionalZero(minutes)}:${this.addOptionalZero(seconds)}`;\r\n    }\r\n\r\n\r\n}","import { Input } from \"./Input\";\r\nimport { Form } from \"./Form\";\r\nimport { Task } from \"./Task\";\r\nimport { taskBoardConfig} from \"./configInputs\";\r\nimport { api} from './API'\r\n\r\nconst getTaskForm = (onTaskCreated) =>\r\n    new Form({\r\n        inputs:  taskBoardConfig.map(input => new Input(input)),\r\n        title: 'ADD TASK',\r\n        submitBtnText: 'Add',\r\n        onSubmit: async (data) => {\r\n            \r\n            const createdTask = await api.createTask(data);\r\n            onTaskCreated(createdTask);\r\n        },\r\n    })\r\n\r\nexport class TaskBoard {\r\n    constructor({appContainer}) {\r\n       this.appContainer = appContainer;\r\n       this.taskForm =  getTaskForm(this.addTask.bind(this))\r\n       this.tasksContainer = document.createElement('div')//содержит карточки заданий\r\n    }\r\n    renderLayout() {\r\n        const board = document.createElement('div'); // cодержит все карточки и taskForm\r\n        const formContainer = document.createElement('div');//контейнер для формы\r\n\r\n        board.classList.add('board');\r\n        formContainer.classList.add('task-form');\r\n        this.tasksContainer.classList.add('task-cards');\r\n\r\n        board.append(formContainer, this.tasksContainer);\r\n        this.taskForm.render(formContainer);\r\n\r\n        this.appContainer.append(board)\r\n    }\r\n\r\n    addTask(taskData) {\r\n        const task = new Task(taskData);\r\n\r\n        task.renderTaskCard(this.tasksContainer)\r\n\r\n    }\r\n\r\n    logout() {\r\n        this.tasksContainer.innerText = '';\r\n    }\r\n\r\n}\r\n    ","const loginConfig = [\r\n    {\r\n        name: 'email', \r\n        placeholder: 'Enter your Email',\r\n        type: 'email',\r\n        label: 'Email', \r\n\r\n    },\r\n    {\r\n        name: 'password', \r\n        placeholder: 'Enter your Password',\r\n        type: 'password',\r\n        label:  'Password',\r\n\r\n    }\r\n   \r\n]\r\n\r\nconst registerConfig = [\r\n    {\r\n        name: 'email', \r\n        placeholder: 'Enter your Email',\r\n        type: 'email',\r\n        label: 'Email', \r\n\r\n    },\r\n    {\r\n        name: 'name', \r\n        placeholder: 'Enter your Name',\r\n        type: 'text',  \r\n        label:  'Name',\r\n\r\n    },\r\n    {\r\n        name: 'password', \r\n        placeholder: 'Enter your Password',\r\n        type: 'password',\r\n        label:  'Password',\r\n\r\n    },\r\n\r\n]\r\n\r\nconst taskBoardConfig = [\r\n    {\r\n        name: 'name', \r\n        placeholder: 'Task name',\r\n        type: 'text',\r\n        label: 'Name', \r\n\r\n    },\r\n    {\r\n        name: 'description', \r\n        placeholder: 'Task description',\r\n        type: 'text',\r\n        label:  'Description',\r\n\r\n    }\r\n   \r\n]\r\n\r\nexport {loginConfig, registerConfig, taskBoardConfig}\r\n","\r\nimport { Input } from './components/Input'\r\nimport { Form } from './components/Form';\r\nimport { Auth } from './components/AUTH';\r\nimport { TaskBoard} from './components/TaskBoard'\r\nimport { api} from './components/API';\r\nimport './styles/style.css';\r\n\r\nconst appContainer = document.getElementById('app');\r\n\r\nconst onLoginSuccess = async() => {\r\n    appContainer.innerHTML = '';\r\n    const user = await api.getSelf();\r\n    renderAppLayout(user);\r\n}\r\n\r\nconst auth = new Auth({\r\n    appContainer,\r\n    onLoginSuccess,\r\n})\r\n\r\nexport const taskBoard = new TaskBoard ({\r\n    appContainer\r\n})\r\n\r\nconst renderAppLayout = async (user) => {\r\nauth.user = user;\r\nauth.renderHeaderControls();\r\ntaskBoard.renderLayout();\r\nconst taskList = await api.getAllTasks();\r\n\r\ntaskList.forEach((task) => taskBoard.addTask(task))\r\n\r\n}\r\n\r\nconst init = async () => {\r\n    const isLoggedIn = api.isLoggedIn();\r\n  \r\n    if (!isLoggedIn) {\r\n      auth.renderAuthForm();\r\n    } else {\r\n      const user = await api.autoLogin();\r\n      renderAppLayout(user);\r\n    }\r\n  };\r\n  \r\n  init();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.js\");\n",""],"names":[],"sourceRoot":""}